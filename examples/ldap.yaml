apiVersion: v1
kind: Namespace
metadata:
  name: ldap

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: config
  namespace: ldap
data:
  # Include security.ldif here if you want TLS.
  schemas.ldif: |
    include: file:///etc/openldap/schema/cosine.ldif
    include: file:///etc/openldap/schema/inetorgperson.ldif
    include: file:///etc/openldap/schema/nis.ldif
  example.com.ldif: |
    dn: olcDatabase=mdb,cn=config
    objectClass: olcDatabaseConfig
    objectClass: olcMdbConfig
    olcDatabase: mdb
    olcRootDN: gidNumber=1000+uidNumber=1000,cn=peercred,cn=external,cn=auth
    olcSuffix: dc=example,dc=com
    olcDbDirectory: /data/example.com
    olcAccess: to attrs=userPassword
      by self write
      by anonymous auth
      by dn.base="cn=Admin,dc=example,dc=com" write
      by * none
    olcAccess: to *
      by self write
      by anonymous none
      by dn.base="cn=Admin,dc=example,dc=com" write
      by * read

---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ldap
  name: openldap
spec:
  strategy:
    rollingUpdate:
      maxSurge: 0
  selector:
    matchLabels:
      app: openldap
  template:
    metadata:
      labels:
        app: openldap
    spec:
      containers:
        - name: openldap
          image: cjyar/openldap:2.4.50
          livenessProbe:
            exec:
              command: [ "ldapsearch", "-H", "ldapi:///", "-Y", "EXTERNAL", "-b", "", "-s", "base", "(objectclass=*)", "namingContexts" ]
          ports:
          - containerPort: 1389
            name: ldap
          volumeMounts:
          - name: config
            mountPath: /config
          - name: data
            mountPath: /data
          # - name: tls
          #   mountPath: /secrets/tls
      securityContext:
        fsGroup: 1000
      volumes:
        - name: config
          configMap:
            name: config
        - name: data
          persistentVolumeClaim:
            claimName: openldap
        # - name: tls
        #   secret:
        #     secretName: ldap.example.com

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: ldap
  name: openldap
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

# ---
# Uncomment this to generate a certificate for TLS, if you have cert-manager installed.

# apiVersion: cert-manager.io/v1
# kind: Certificate
# metadata:
#   name: ldap.example.com
#   namespace: ldap
# spec:
#   secretName: ldap.example.com
#   dnsNames:
#     - ldap.example.com
#   issuerRef:
#     kind: ClusterIssuer
#     name: letsencrypt

---

apiVersion: v1
kind: Service
metadata:
  namespace: ldap
  name: openldap
spec:
  type: LoadBalancer
  ports:
    - name: ldap
      port: 389
      targetPort: 1389
  selector:
    app: openldap
